name: Web Client Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# cancel outdated builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
    BUCKET_LINK: https://ce847ac4c44fb11af63e62ba34ec40db.r2.cloudflarestorage.com
    BUCKET_NAME: shine-games
    EXAMPLES: camera_follow camera_free camera_look_at camera_orbit input_actions input_pointer

jobs:
  wasm-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}


      - name: Setup Rust
        run: |
          rustup target add wasm32-unknown-unknown
          rustup component add rustfmt clippy
          
      - name: Install Wasm tools
        run: |
           curl https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh -sSf | sh
           cargo binstall wasm-bindgen-cli
           cargo binstall wasm-opt

      - name: Compile Rust to WASM
        run: |
          cargo build --target wasm32-unknown-unknown --profile release-lto -p shine-client

          echo "Run bindgen for shine-client"
          wasm-bindgen --no-typescript --target web \
            --out-dir ./dist/${{ github.sha }}\
            ./target/wasm32-unknown-unknown/release-lto/shine-client.wasm

          echo "Optimize shine-client"
          wasm-opt -Oz -o ./dist/${{ github.sha }}/shine-client_opt.wasm ./dist/${{ github.sha }}/shine-client_bg.wasm
          rm ./dist/${{ github.sha }}/shine-client_bg.wasm
          mv ./dist/${{ github.sha }}/shine-client_opt.wasm ./dist/${{ github.sha }}/shine-client_bg.wasm

          echo "Copy index.html"
          cp client/index.html ./dist/${{ github.sha }}/index.html

      - name: Compile examples
        run: |
          cargo build --target wasm32-unknown-unknown --profile release-lto -p shine-client --examples
          for example in ${{ env.EXAMPLES }}; do
            echo "Run bindgen for ${example}"
            wasm-bindgen --no-typescript --target web \
              --out-dir ./dist/${{ github.sha }} \
              ./target/wasm32-unknown-unknown/release-lto/examples/${example}.wasm

            echo "Optimize ${example}"
            wasm-opt -Oz -o ./dist/${{ github.sha }}/${example}_opt.wasm ./dist/${{ github.sha }}/${example}_bg.wasm
            rm ./dist/${{ github.sha }}/${example}_bg.wasm
            mv ./dist/${{ github.sha }}/${example}_opt.wasm ./dist/${{ github.sha }}/${example}_bg.wasm
            
            echo "Create ${example}.html"
            sed 's/shine-client/${example}/g' client/index.html > ./dist/${{ github.sha }}/${example}.html
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: game-wasm
          path: ./dist

  deploy:
    needs: wasm-build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: game-wasm
          path: ./dist
          
      - name: Setup AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region "$AWS_DEFAULT_REGION"   
          aws configure set default.s3.max_concurrent_requests 2
          aws configure set default.s3.multipart_threshold "50MB"

      - name: Upload game
        run: |
          aws s3 sync ./dist s3://${BUCKET_NAME}/ \
              --endpoint-url=${BUCKET_LINK} \
              --cache-control "public, max-age=31536000, immutable" \
              --checksum-algorithm CRC32

      - name: Upload latest.json
        run: |
          echo '{ "version": "'${{ github.sha }}'" }' > ./latest.json
          aws s3 cp ./latest.json s3://${BUCKET_NAME}/latest.json \
              --endpoint-url=${BUCKET_LINK} \
              --cache-control "no-cache, no-store, must-revalidate"
